"use strict";
/**
 * Класс "Форма отправки e-mail"
 *
 * @class
 * @classdesc Проверяет данные полей формы на допустимость значений и отправляет форму на сервер
 *
 * @param {object} form - Ссылка на объект формы, которую необходимо предварительно проверить перед отправкой
 *
 * @author Ildar Ibragimov <iibragimov84@gmail.com>
 * @copyright Ildar Ibragimov 2016
 */
function formValidator(form) {
    /**
     * @property {collection} buttons - Коллекция только кнопок формы
     * @property {collection} fields - Коллекция элементов (не кнопок) формы
     */
    var buttons = form.querySelectorAll('.form__element_button'),
        fields = form.querySelectorAll(':not(.form__element_button) .form__field');
    /**
     * Метод проверяет пуста ли форма
     *
     * @return {boolean} false/true - "ДА" / "НЕТ"
     * 
     * @description Вспомогательный внутренний метод. Проверяет, если ли хотя бы одно незаполненное поле. Возвращает "ДА", если форма имеет хотя бы одно незаполненное поле; "НЕТ", Если форма заполнена полностью.
     */
    function isFormEmpty() {
        // Обход коллеции объектов в массиве
        for (var f = 0; f < fields.length; f++) {
            // Если тип элемента формы - captcha
            if ( ~fields[f].name.toLowerCase().indexOf('captcha') ) {
                // Прерывание выполнения текущей итерации и переход к следующей итерации
                continue;
            }
            // Если содержимое элемента формы пустое
            if ( (fields[f].value == '' || fields[f].value == fields[f].dataset.startingValue) && fields[f].hasAttribute('required') ) {
                // Возвращение результата "Да, форма либо пуста, либо не все элементы заполнены"
                return true;
            }
        }
        // Возвращение результата "Нет, форма заполнена полностью"
        return false;
    }
    /**
     * Метод активирует/деактивирует кнопки действий формы
     *
     * @param {boolean} state - Статус доступности кнопок действий формы
     * @return void
     *
     * @description Вспомогательный внутренний метод. Проверяет, текущее состояние доступности кнопок формы и Активирует/Деактивирует их в зависимости от готовности формы к проверке содержимого. Устанавливает состояние "true", если кнопки доступны или false, если кнопки не доступны.
     */
    function enableFormActions(state) {
        // Обход коллекции кнопок действий в цикле
        for ( var b = 0; b < buttons.length; b++ ) {
            // Переключаем атрибут "disabled" в завсисимости от готовности формы к проверке
            ( state )
                ? buttons[b].removeAttribute('disabled')
                : buttons[b].setAttribute('disabled','')
        }
    }
    /**
     * Метод проверяет значения поля формы на допустимость и валидность
     *
     * @return {object} result - Объект системных сообщений о результатах проверки
     */
    function checkFormData() {
        // Объявление переменных:
        var logMsgs = [], // Массив сообщений об ошибках
            result = {
                type: 'success',
                report: ['Проверка данных прошла успешно!']
            };
        // Обход коллеции объектов в массиве
        for (var f = 0; f < fields.length; f++) {
            // Объявление переменных:
            var tagName = fields[f].tagName.toLowerCase(), // Название тега элемента формы
                name = fields[f].name, // Значение атрибута "name" элемента формы
                type = fields[f].type, // Значение атрибута "type" элемента формы
                value = fields[f].value.trim(); // Содержимое элемента формы
            // Если тип элемента формы - captcha
            if ( ~name.toLowerCase().indexOf('captcha') ) {
                // Если содержимое элемента формы не пустое
                if ( value != '' ) {
                    // Формирование сообщения об ошибке
                    logMsgs[f] = 'Ошибка идентификации!';
                    // Прерывание выполнения цикла, выход из цикла
                    break;
                }
                // Прерывание выполнения текущей итерации и переход к следующей итерации
                continue;
            }
            // Если содержимое элемента формы пустое
            if ( value == '' ) {
                // Формирование сообщения об ошибке
                logMsgs[f] = 'Поле не должно быть пустым!';
                // Прерывание выполнения текущей итерации и переход к следующей итерации
                continue;
            }
            // Проверка (по значнию атрибута "name") содержимого элемента формы на соответствие присвоенному типу поля
            switch ( name ) {
                case 'name':
                    // Формирование регулярного выражения (только буквы русского и латинского алфавита и пробелы) для поиска совпадений
                    var regExp = /(^[а-яА-ЯёЁa-zA-Z\s]*$)/i;
                    // Если совпадения найдены
                    if ( regExp.exec(value) == null) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Имя должно состоять только из букв русского или латинского алфавита!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'cardholderName':
                    // Формирование регулярного выражения (только заглавные буквы латинского алфавита и пробелы) для поиска совпадений
                    var regExp = /(^[A-Z\s]*$)/i;
                    // Если совпадения найдены
                    if ( regExp.exec(value) == null) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Имя владельца карты должно быть введено в точности как указано на карте!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'email':
                    // Формирование регулярного выражения (только буквы латинского алфавита, цифры, знаки "-", "_", "@") для поиска совпадений
                    var regExp = /(^([a-z0-9]+[-._]{0,1})+@([a-z0-9]+[-._]{0,1})+\.+[a-z]{2,8}$)/i;
                    // Если совпадения найдены
                    if ( regExp.exec(value) == null) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'E-mail указан не верно!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'phone':
                    // Формирование регулярного выражения (только цифры, пробелы, знаки "(", ")", "-", "+") для поиска совпадений
                    var regExp = /(\+?[7,8][\s\-{1}]?[\({1}]?\d{3,6}[\){1}]?[\s\-{1}]?\d{1,3}[\s\-{1}]?\d{2}[\s\-{1}]?\d{2}\b)/;
                    // Если совпадения найдены ИЛИ длина значения поля меньше 6 символов
                    if ( regExp.exec(value) == null ) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Номер телефона указан не верно!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'zip':
                case 'securityCode':
                    // Формирование регулярного выражения (только целые числа) для поиска совпадений
                    var regExp = /(^[0-9]*$)/;
                    // Если совпадения найдены
                    if ( regExp.exec(value) == null) {
                        // Формирование сообщения об ошибке
                        if (name = "zip") logMsgs[f] = 'Индекс должен состоять только из цифр!';
                        if (name = "securityCode") logMsgs[f] = 'Код безопасности должен состоять только из цифр!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'cardNumber':
                    // Формирование регулярного выражения (только целые числа и пробелы) для поиска совпадений
                    var regExp = /(^[0-9\s]*$)/;
                    // Если совпадения найдены
                    if ( regExp.exec(value) == null) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Номер карты должен состоять только из цифр!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'expireDate':
                    // Формирование регулярного выражения (только целые числа, пробелы и символ "/") для поиска совпадений
                    var regExp = /(\d{2}[\s{1}]?[\/{1}][\s{1}]?\d{2})/,
                        arr = value.split(" / "),
                        today = new Date(),
                        year = today.getFullYear().toString();
                    // Если совпадения найдены
                    if ( regExp.exec(value) == null || arr[0] > 12 || arr[1] < year.substr(year.length - 2)) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Формат срока действия карты введен не корректно!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                case 'message':
                    // Формирование регулярного выражения (любые символы кроме руссих букв и пробела) для поиска совпадений
                    var regExp = /([\<\>]|script|style)/i;
                    // Если совпадения найдены
                    if ( regExp.exec(value) !== null) {
                        // Формирование сообщения об ошибке
                        logMsgs[f] = 'Вводите только текст! HTML-теги недопустимы!';
                    }
                    // Прерывание выполнения конструкции "switch"
                    break;
                default:
                    // Прерывание выполнения конструкции "switch"
                    break;
            }
        }
        // Если массив сообщений об ошибках не пустой
        if ( logMsgs.length > 0 ) {
            result.type = 'fail';
            result.report = logMsgs;
        }
        // Возвращение результата проверки
        return result;
    }

    // Вызов метода деактивации кнопок действий формы, если содержимое хотя бы одного элемента формы пустое
    enableFormActions( !isFormEmpty() );

    // Назначение обработчика события отправки формы на сервер
    form.addEventListener("submit", function(event) {
        var checkResult = checkFormData();
        // Если проверка данных формы вернула ошибку в данных
        if ( checkResult.type == 'fail' ) {
            console.log(checkResult.report);
            //alert ('Данные формы НЕ корректны!');
            // Отмена действия по умолчанию браузера на событие
            event.preventDefault();
        } else {
            // Здесь вызываем методы, формирующие дополнитеьльные данные для проверки пользователя по тестам Тьюринга на сервере
        }
    });

    // Назначение обработчиков событий изменения содержимого элементов формы
    for (var f = 0; f < fields.length; f++) {
        // Если тип элемента формы - captcha
        if ( ~fields[f].name.toLowerCase().indexOf('captcha') ) {
            // Прерывание выполнения текущей итерации и переход к следующей итерации
            continue;
        }
        // Назначение обработчика событий "onkeyup", "oninput", "onchange" 
        fields[f].onkeyup = fields[f].oninput = fields[f].onchange = function () {
            // Вызов метода проверки заполненности всех полей формы с последующей активацией/деактивацией кнопок действий формы
            enableFormActions( !isFormEmpty() );
        };
        // Назначение обработчика событий "onchange" для IE 8-
        fields[f].onpropertychange = function() {
            // Если имя изменённого свойства (атрибута) - "value"
            if (event.propertyName == "value") {
                // Вызов метода проверки заполненности всех полей формы с последующей активацией/деактивацией кнопок действий формы
                enableFormActions( !isFormEmpty() );
            }
        };
        // Назначние обработчика события "oncut"
        fields[f].oncut = function() {
            // Вызов метода проверки заполненности всех полей формы с последующей активацией/деактивацией кнопок действий формы
            setTimeout( enableFormActions( !isFormEmpty() ), 0); // на момент oncut значение еще старое
        };
        // Назначение обработчика событий "onfocus", "onblur"
        fields[f].onfocus = fields[f].onblur = function(event) {
            var field = event.target;
            if (field.dataset.startingValue) {
                switch (event.type) {
                    case 'focus':
                        if (field.value == '') {
                            field.value = field.dataset.startingValue;
                        }
                        // Прерывание выполнения конструкции "switch"
                        break;
                    case 'blur':
                        if (field.value == field.dataset.startingValue) {
                            field.value = '';
                        }
                        // Прерывание выполнения конструкции "switch"
                        break;
                }
            }
        };
    }
}
